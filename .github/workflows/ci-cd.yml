name: Basic CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  DOCKERHUB_USERNAME: dezade
  IMAGE_BACKEND: dezade/pcbanabo-backend
  IMAGE_FRONTEND: dezade/pcbanabo-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}:${{ github.sha }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: SSH and deploy on VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 900
          script: |
            echo "Pulling latest Docker images..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}:latest

            echo "Stopping and removing existing containers..."
            docker stop pcbanabo-backend || true && docker rm pcbanabo-backend || true
            docker stop pcbanabo-frontend || true && docker rm pcbanabo-frontend || true
            docker stop pcbanabo-db || true && docker rm pcbanabo-db || true
            docker stop pcbanabo-nginx || true && docker rm pcbanabo-nginx || true

            echo "Cleaning up port 80 and 3000..."
            sudo fuser -k 80/tcp || true
            sudo fuser -k 3000/tcp || true

            echo "Creating Docker network..."
            docker network create pcbanabo-net || true

            echo "Running Docker containers..."

            echo "Starting PostgreSQL database container..."
            docker run -d \
              --name pcbanabo-db \
              --restart unless-stopped \
              --network pcbanabo-net \
              -e POSTGRES_DB=pcbanabo \
              -e POSTGRES_USER=${{ secrets.DATABASE_USERNAME}} \
              -e POSTGRES_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
              -v pgdata:/var/lib/postgresql/data \
              -v /home/pcbanabo/db-init:/docker-entrypoint-initdb.d \
              -p 5432:5432 \
              postgres:16.9-alpine

            echo "Starting backend container..."
            docker run -d \
              --name pcbanabo-backend \
              --restart always \
              --network pcbanabo-net \
              -e SPRING_DATASOURCE_URL=${{ secrets.DATABASE_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.DATABASE_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
              -e CHROME_BINARY_PATH=/usr/bin/google-chrome \
              -e CHROMEDRIVER_PATH=/usr/bin/chromedriver \
              -p 8080:8080 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}:latest

            echo "Starting frontend container..."
            docker run -d \
              --name pcbanabo-frontend \
              --restart always \
              --network pcbanabo-net \
              -e VITE_BACKEND_URL=http://pcbanabo-backend:8080 \
              -e DOCKER=True \
              -p 3000:3000 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}:latest

            echo "Starting Nginx container..."
            docker run -d \
              --name pcbanabo-nginx \
              --restart always \
              --network pcbanabo-net \
              -v /home/pcbanabo/nginx.conf:/etc/nginx/nginx.conf:ro \
              -p 80:80 \
              nginx:stable-alpine

            echo "Deployment completed successfully!"
