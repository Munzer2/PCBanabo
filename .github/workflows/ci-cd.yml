name: Basic CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  DOCKERHUB_USERNAME: dezade
  IMAGE_BACKEND: dezade/pcbanabo-backend
  IMAGE_FRONTEND: dezade/pcbanabo-frontend
  DATABASE_URL: jdbc:postgresql://pcbanabo-db:5432/pcbanabo

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Build backend image (for testing)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: pcbanabo-backend:test

      - name: Build frontend image (for testing)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: pcbanabo-frontend:test

  push-images:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}:${{ github.sha }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: push-images
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: SSH and deploy on VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 1200s
          script: |
            echo -e "\033[0;36mPulling latest Docker images...\033[0m"
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}:latest

            echo -e "\033[0;33mStopping and removing existing containers...\033[0m"
            docker stop pcbanabo-backend || true && docker rm pcbanabo-backend || true
            docker stop pcbanabo-frontend || true && docker rm pcbanabo-frontend || true
            docker stop pcbanabo-db || true && docker rm pcbanabo-db || true
            docker stop pcbanabo-nginx || true && docker rm pcbanabo-nginx || true

            echo -e "\033[0;31mCleaning up port 80, 3000 and 8080...\033[0m"
            sudo fuser -k 80/tcp || true
            sudo fuser -k 3000/tcp || true
            sudo fuser -k 8080/tcp || true

            echo -e "\033[0;33mCreating Docker network...\033[0m"
            docker network create pcbanabo-net || true

            echo -e "\033[0;33mRunning Docker containers...\033[0m"

            echo -e "\033[0;32mStarting PostgreSQL database container...\033[0m"
            docker run -d \
              --name pcbanabo-db \
              --restart unless-stopped \
              --network pcbanabo-net \
              -e POSTGRES_DB=pcbanabo \
              -e POSTGRES_USER=${{ secrets.DATABASE_USERNAME}} \
              -e POSTGRES_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
              -v pgdata:/var/lib/postgresql/data \
              -v /home/pcbanabo/db-init:/docker-entrypoint-initdb.d \
              postgres:16.9-alpine

            
            echo -e "\033[0;33mWaiting for database to be ready...\033[0m"
            until docker exec pcbanabo-db pg_isready -U ${{ secrets.DATABASE_USERNAME }}; do
              sleep 1
            done

            echo -e "\033[0;36mStarting backend container...\033[0m"
            docker run -d \
              --name pcbanabo-backend \
              --restart always \
              --network pcbanabo-net \
              -e SPRING_DATASOURCE_URL=${{ env.DATABASE_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.DATABASE_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
              -e CHROME_BINARY_PATH=/usr/bin/google-chrome \
              -e CHROMEDRIVER_PATH=/usr/bin/chromedriver \
              ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}:latest

            echo -e "\033[0;35mStarting frontend container...\033[0m"
            docker run -d \
              --name pcbanabo-frontend \
              --restart always \
              --network pcbanabo-net \
              --network-alias frontend \
              -e DOCKER=True \
              ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}:latest

            echo -e "\033[0;34mStarting Nginx container...\033[0m"
            docker run -d \
              --name pcbanabo-nginx \
              --restart always \
              --network pcbanabo-net \
              -v /home/pcbanabo/nginx.conf:/etc/nginx/nginx.conf:ro \
              -p 80:80 \
              nginx:stable-alpine

            echo -e "\033[0;32mDeployment completed successfully!\033[0m"
